[
    {
        "id": 1,
        "name": "Тарас Шевченко",
        "type": "Бюджет",
        "balance": "180"
    },
    {
        "id": 2,
        "name": "Тимошенко Юлія",
        "type": "Контракт",
        "balance": "148"
    },
    {
        "id": 3,
        "name": "Зубна Анастасія",
        "type": "Контракт",
        "balance": "153"
    },
    {
        "id": 5,
        "name": "Кошуняев Артем",
        "type": "Бюджет",
        "balance": "183"
    },
    {
        "id": 6,
        "name": "Ткачов Миколай",
        "type": "Контракт",
        "balance": "169"
    },
    {
        "id": 7,
        "name": "Савчук Олексій",
        "type": "Контракт",
        "balance": "137"
    },
    {
        "id": 8,
        "name": "Сирник Павло",
        "type": "Бюджет",
        "balance": "176"
    },
    {
        "id": 9,
        "name": "Мирна Софія",
        "type": "Контракт",
        "balance": "151"
    },
    {
        "id": 11,
        "name": "Криворучко Марія",
        "type": "Контракт",
        "balance": "145"
    },
    {
        "id": 13,
        "name": "Кожух Олександр",
        "type": "Контракт",
        "balance": "157"
    },
    {
        "id": 14,
        "name": "Ветка Єгор",
        "type": "Контракт",
        "balance": "140"
    }
]


Загальний процес роботи
Клієнтська частина (Angular):
- Користувач взаємодіє з інтерфейсом (додає, редагує, видаляє записи).
- Дані передаються через AccountService до серверної частини.

Серверна частина (Node.js):
- Отримує HTTP-запити від Angular.
- Виконує SQL-запити до PostgreSQL через db.js.

База даних (PostgreSQL):
- Зберігає, оновлює, видаляє або повертає дані.


Логіка роботи системи:

Галузь є статичним класифікатором, який використовується для групування спеціальностей. Наприклад, користувач бачить, що "Прикладна математика" належить до "Математичної" галузі.
Спеціальність — ключова сутність, яка відображається на головній сторінці. Користувач може вибрати спеціальність і переглянути всіх студентів, які подавали на неї заявки.
Студент подає заявки на кілька спеціальностей, вказуючи пріоритети. Наприклад, студент може обрати "Комп’ютерні науки" як першу пріоритетну спеціальність, а "Прикладну математику" — як другу.
Заявка пов’язує студентів і спеціальності, дозволяючи системі відстежувати, хто на що подавався. Наприклад, для спеціальності "Прикладна математика" система показує всіх студентів із їхніми балами та статусом.
Зарахування фіксує остаточне рішення: студент зарахований на одну спеціальність. Статус "+/–" у списку студентів за спеціальністю визначається наявністю запису в таблиці Зарахування для відповідної пари студент_id і спеціальність_id.


    <mat-form-field style="width: 175px;">
        <input [(ngModel)]="account.name" matInput placeholder="Введіть ім'я" type="text" />
        <mat-icon matSuffix>person</mat-icon>
      </mat-form-field>
      
      <mat-form-field style="width: 175px; margin-left: 15px">
        <input [(ngModel)]="account.type" matInput placeholder="Форма навчання" type="text" />
        <mat-icon matSuffix>info</mat-icon>
      </mat-form-field>
      
      <mat-form-field style="width: 175px; margin-left: 15px">
        <input [(ngModel)]="account.balance" matInput placeholder="Бал" type="text" />
        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
      
      <button mat-flat-button style="margin-left: 25px" color="primary" (click)="addOrEditAccount(account)">Submit</button>
      <button mat-flat-button style="margin-left: 10px" color="warn" >Cancel</button>

// Додавання нового студента
router.post('/createStudent', async (req, res) => {
  const { first_name, last_name, email, phone_number, date_of_birth, group_id } = req.body;

  if (!first_name || !last_name || !email || !group_id) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  if (!/^\S+@\S+\.\S+$/.test(email)) {
    return res.status(400).json({ error: 'Invalid email format' });
  }
  if (phone_number && !/^\+380\d{9}$/.test(phone_number)) {
    return res.status(400).json({ error: 'Invalid phone number format' });
  }
  if (date_of_birth && isNaN(Date.parse(date_of_birth))) {
    return res.status(400).json({ error: 'Invalid date of birth' });
  }

  try {
    const result = await pool.query(
      `INSERT INTO student (first_name, last_name, email, phone_number, date_of_birth, group_id)
       VALUES ($1, $2, $3, $4, $5, $6)
       RETURNING *`,
      [first_name, last_name, email, phone_number, date_of_birth, group_id]
    );

    res.status(201).json({
      message: 'Student created successfully',
      student: result.rows[0],});
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Отримання звітності за факультетом
router.get('/reports/:department_id', async (req, res) => {
  try {
    const department_id = req.params.department_id;

    // Перевірка існування факультету
    const departmentCheck = await pool.query(
      'SELECT department_name FROM department WHERE department_id = $1',
      [department_id]
    );
    if (departmentCheck.rows.length === 0) {
      return res.status(404).json({ error: 'Faculty not found' });
    }

    // 1. Спеціальності факультету
    const specialties = await pool.query(
      `SELECT specialty_id, specialty_name 
       FROM specialty 
       WHERE department_id = $1 
       ORDER BY specialty_name`,
      [department_id]
    );

    // 2. Викладачі та їхні предмети
    const teachers = await pool.query(
      `SELECT 
         t.teacher_id,
         t.first_name || ' ' || t.last_name AS teacher_name,
         COALESCE(
           ARRAY_AGG(s.subject_name) FILTER (WHERE s.subject_id IS NOT NULL),
           '{}'
         ) AS subjects
       FROM teacher t
       LEFT JOIN subject s ON t.teacher_id = s.teacher_id
       WHERE t.department_id = $1
       GROUP BY t.teacher_id, t.first_name, t.last_name
       ORDER BY t.last_name, t.first_name`,
      [department_id]
    );

    // 3. Популярність спеціальностей
    const specialtyPopularity = await pool.query(
      `SELECT 
         s.specialty_id,
         s.specialty_name,
         COUNT(st.student_id) AS student_count
       FROM specialty s
       LEFT JOIN student st ON s.specialty_id = st.specialty_id
       WHERE s.department_id = $1
       GROUP BY s.specialty_id, s.specialty_name
       ORDER BY student_count DESC, s.specialty_name`,
      [department_id]
    );

    res.json({
      department: departmentCheck.rows[0].department_name,
      specialties: specialties.rows,
      teachers: teachers.rows,
      specialtyPopularity: specialtyPopularity.rows
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


  <div class="actions">
    <button mat-raised-button color="accent" (click)="goToReports()">Звітність</button>
  </div> 